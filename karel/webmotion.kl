PROGRAM webmotion
%NOPAUSE=ERROR+COMMAND+TPENABLE
%NOABORT=ERROR+COMMAND
%NOPAUSESHFT

CONST
	pr_num_pic = 29
	pr_num_pla = 30
	pr_num_zro = 31

VAR
	STATUS: INTEGER
	pickupPosJ: JOINTPOS
	placePosJ: JOINTPOS
	zeroPosJ: JOINTPOS
	
	start: BOOLEAN
	
	pickup: BOOLEAN
	place: BOOLEAN
	zero: BOOLEAN

	direction: VECTOR
	
	degree_p: INTEGER
	degree_m: INTEGER

	distance_p: INTEGER 
	distance_m: INTEGER 
		
	j1p: BOOLEAN
	j2p: BOOLEAN
	j3p: BOOLEAN
	j4p: BOOLEAN
	j5p: BOOLEAN
	j6p: BOOLEAN
	j1m: BOOLEAN
	j2m: BOOLEAN
	j3m: BOOLEAN
	j4m: BOOLEAN
	j5m: BOOLEAN
	j6m: BOOLEAN
	
	movewlpx: BOOLEAN
	movewlpy: BOOLEAN
	movewlpz: BOOLEAN		
	movewlmx: BOOLEAN
	movewlmy: BOOLEAN
	movewlmz: BOOLEAN

	movetrpx: BOOLEAN
	movetrmx: BOOLEAN
	movetrpy: BOOLEAN
	movetrmy: BOOLEAN
	movetrpz: BOOLEAN
	movetrmz: BOOLEAN
	
BEGIN

	$MOTYPE = JOINT
	$TERMTYPE = FINE
	$SPEED = 210

	start = FALSE
	
	pickup = FALSE
	place = FALSE
	zero = FALSE	
	
	degree_p = 30
	degree_m = -30	
		
	distance_p = 100
	distance_m = -100	
		
	j1p = FALSE
	j2p = FALSE
	j3p = FALSE
	j4p = FALSE
	j5p = FALSE
	j6p = FALSE
	j1m = FALSE
	j2m = FALSE
	j3m = FALSE
	j4m = FALSE
	j5m = FALSE					
	j6m = FALSE
	
	movewlpx = FALSE
	movewlpy = FALSE
	movewlpz = FALSE		
	movewlmx = FALSE
	movewlmy = FALSE
	movewlmz = FALSE

	movetrpx = FALSE
	movetrpy = FALSE
	movetrpz = FALSE	
	movetrmx = FALSE	
	movetrmy = FALSE
	movetrmz = FALSE
		
	REPEAT
		IF (NOT start) THEN

			DELAY 300

		ELSE
			IF pickup THEN
				pickupPosJ = GET_JPOS_REG(pr_num_pic,STATUS)
				IF (STATUS<>0) THEN 
					WRITE ('Something happend then pickup')
				ELSE
					MOVE TO pickupPosJ
					WRITE(pickupPosJ,CR)
					WRITE ('Moving to pickup',CR)
					pickup = FALSE
				ENDIF
			ENDIF
			
			IF place THEN
				placePosJ = GET_JPOS_REG(pr_num_pla,STATUS)
				IF (STATUS<>0) THEN 
					WRITE ('Something happend then place')
				ELSE
					MOVE TO placePosJ
					WRITE(placePosJ,CR)
					WRITE ('Moving to place',CR)
					place = FALSE
				ENDIF
			ENDIF

			IF zero THEN
				zeroPosJ = GET_JPOS_REG(pr_num_zro,STATUS)
				IF (STATUS<>0) THEN 
					WRITE ('Something happend then place')
				ELSE
					MOVE TO zeroPosJ
					WRITE(zeroPosJ,CR)
					WRITE ('Moving to zero',CR)
					zero = FALSE
				ENDIF
			ENDIF

--Rotate in TCP
			IF movetrpx THEN
				direction.x = 1
				direction.y = 0
				direction.z = 0
				MOVE ABOUT direction BY degree_p
				WRITE('Rotating +x direction in tool frame',CR)
				movetrpx = FALSE
			ENDIF
			
			IF movetrmx THEN
				direction.x = 1
				direction.y = 0
				direction.z = 0
				MOVE ABOUT direction BY degree_m
				WRITE('Rotating -x direction in tool frame',CR)
				movetrmx = FALSE
			ENDIF			

			IF movetrpy THEN
				direction.x = 0
				direction.y = 1
				direction.z = 0
				MOVE ABOUT direction BY degree_p
				WRITE('Rotating +y direction in tool frame',CR)
				movetrpy = FALSE
			ENDIF
			
			IF movetrmy THEN
				direction.x = 0
				direction.y = 1
				direction.z = 0
				MOVE ABOUT direction BY  degree_m
				WRITE('Rotating -y direction in tool frame',CR)
				movetrmy = FALSE
			ENDIF
			
			IF movetrpz THEN
				direction.x = 0
				direction.y = 0
				direction.z = 1
				MOVE ABOUT direction BY degree_p
				WRITE('Rotating +z direction in tool frame',CR)
				movetrpz = FALSE
			ENDIF
			
			IF movetrmz THEN
				direction.x = 0
				direction.y = 0
				direction.z = 1
				MOVE ABOUT direction BY  degree_m
				WRITE('Rotating -z direction in tool frame',CR)
				movetrmz = FALSE
			ENDIF

--Move in World
			IF movewlpx THEN
				direction.x = distance_p
				direction.y = 0
				direction.z = 0
				MOVE RELATIVE direction
				WRITE('Moving to +x direction',CR)
				movewlpx = FALSE
			ENDIF
			
			IF movewlmx THEN
				direction.x = distance_m
				direction.y = 0
				direction.z = 0
				MOVE RELATIVE direction
				WRITE('Moving to -x direction',CR)
				movewlmx = FALSE
			ENDIF			

			IF movewlpy THEN
				direction.x = 0
				direction.y = distance_p
				direction.z = 0
				MOVE RELATIVE direction
				WRITE('Moving to +y direction',CR)
				movewlpy = FALSE
			ENDIF
			
			IF movewlmy THEN
				direction.x = 0
				direction.y = distance_m
				direction.z = 0
				MOVE RELATIVE direction
				WRITE('Moving to -y direction',CR)
				movewlmy = FALSE
			ENDIF
			
			IF movewlpz THEN
				direction.x = 0
				direction.y = 0
				direction.z = distance_p
				MOVE RELATIVE direction
				WRITE('Moving to +z direction',CR)
				movewlpz = FALSE
			ENDIF
			
			IF movewlmz THEN
				direction.x = 0
				direction.y = 0
				direction.z = distance_m
				MOVE RELATIVE direction
				WRITE('Moving to -z direction',CR)
				movewlmz = FALSE
			ENDIF


-- Jogging			
			IF j1p THEN
				MOVE AXIS 1 BY degree_p
				WRITE ('j1p is jogging',CR)
				 j1p = FALSE
			ENDIF

			IF j2p THEN
				MOVE AXIS 2 BY degree_p
				WRITE ('j2p is jogging',CR)
				 j2p = FALSE
			ENDIF

			IF j3p THEN
				MOVE AXIS 3 BY degree_p
				WRITE ('j3p is jogging',CR)
				 j3p = FALSE
			ENDIF

			IF j4p THEN
				MOVE AXIS 4 BY degree_p
				WRITE ('j4p is jogging',CR)
				 j4p = FALSE
			ENDIF

			IF j5p THEN
				MOVE AXIS 5 BY degree_p
				WRITE ('j5p is jogging',CR)
				 j5p = FALSE
			ENDIF

			IF j6p THEN
				MOVE AXIS 6 BY degree_p
				WRITE ('j6p is jogging',CR)
				 j6p = FALSE
			ENDIF
			
			IF j1m THEN
				MOVE AXIS 1 BY degree_m
				WRITE ('j1m is jogging',CR)
				 j1m = FALSE
			ENDIF						
			
			IF j2m THEN
				MOVE AXIS 2 BY degree_m
				WRITE ('j2m is jogging',CR)
				 j2m = FALSE
			ENDIF
			
			IF j3m THEN
				MOVE AXIS 3 BY degree_m
				WRITE ('j3m is jogging',CR)
				 j3m = FALSE
			ENDIF
			
			IF j4m THEN
				MOVE AXIS 4 BY degree_m
				WRITE ('j4m is jogging',CR)
				 j4m = FALSE
			ENDIF
			
			IF j5m THEN
				MOVE AXIS 5 BY degree_m
				WRITE ('j5m is jogging',CR)
				 j5m = FALSE
			ENDIF
			
			IF j6m THEN
				MOVE AXIS 6 BY degree_m
				WRITE ('j6m is jogging',CR)
				 j6m = FALSE
			ENDIF
			
			start = FALSE
				
		ENDIF
		
	UNTIL FALSE

END webmotion